import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

# Sample age data (assuming 100 samples)
age = np.array([i for i in range(1, 101)]).reshape(-1, 1)  # 1 to 100

# Data from the provided lists
data = {
    'T': ['100%', '100%', '100%', '100%', '0%', '100%', '100%', '100%', '100%', '0%', '100%', '100%',
          '100%', '100%', '100%', '100%', '100%', '0%', '100%', '100%', '100%', '100%', '100%',
          '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%',
          '100%', '100%', '100%', '100%', '0%', '0%', '100%', '100%', '100%', '100%', '100%',
          '100%', '0%', '99%', '100%', '100%', '100%', '100%', '100%', '100%', '0%', '100%',
          '100%', '100%', '0%', '0%', '100%', '100%', '100%', '100%', '100%', '0%', '100%',
          '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%',
          '100%', '100%', '100%', '0%', '100%', '100%', '100%', '100%', '100%', '100%',
          '100%', '100%', '100%', '96%', '90%', '100%', '100%', '100%', '100%', '100%',
          '100%', '0%', '0%', '0%', '0%', '100%', '100%', '100%', '100%'],

    'AB': ['99%', '100%', '95%', '100%', '90%', '100%', '99%', '95%', '90%', '100%', '90%',
           '100%', '0%', '99%', '90%', '0%', '0%', '100%', '95%', '90%', '95%', '100%',
           '95%', '99%', '90%', '99%', '99%', '100%', '90%', '100%', '100%', '100%',
           '99%', '90%', '99%', '100%', '90%', '100%', '90%', '95%', '100%', '100%',
           '95%', '100%', '95%', '100%', '100%', '100%', '95%', '100%', '100%', '100%',
           '99%', '100%', '0%', '90%', '90%', '90%', '90%', '90%', '100%', '99%',
           '99%', '95%', '99%', '100%', '99%', '100%', '100%', '100%', '99%', '90%',
           '99%', '90%', '100%', '100%', '99%', '90%', '100%', '100%', '100%', '90%',
           '90%', '100%', '99%', '95%', '95%', '90%', '90%', '100%', '100%', '90%',
           '100%', '0%', '100%', '100%', '90%', '100%', '99%', '100%', '100%', '99%'],

    'CY': ['100%', '100%', '100%', '100%', '90%', '100%', '100%', '100%', '90%', '100%',
           '100%', '100%', '100%', '100%', '100%', '99%', '100%', '100%', '100%', '100%',
           '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%',
           '90%', '100%', '100%', '100%', '99%', '90%', '100%', '100%', '100%', '100%',
           '100%', '100%','100%', '100%', '100%', '100%', '90%', '100%', '100%', '100%', '90%', '100%',
           '100%', '100%', '100%', '100%', '100%', '99%', '100%', '100%', '100%', '100%',
           '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%', '100%',
           '90%', '100%', '100%', '100%', '99%', '90%', '100%', '100%', '100%', '100%',
           '100%', '100%','100%', '100%', '90%', '100%', '100%', '100%', '90%', '100%','100%','100%', '100%', '90%', '100%', '100%', '100%', '90%', '100%'],

    'CA': ['0%', '0%', '0%', '0%', '50%', '50%', '0%', '50%', '0%', '50%', '0%', '0%',
           '50%', '90%', '90%', '90%', '0%', '90%', '10%', '60%', '0%', '70%', '60%',
           '0%', '60%', '60%', '1%', '0%', '0%', '0%', '80%', '0%', '90%', '90%', '0%',
           '90%', '0%', '0%', '0%', '60%', '70%', '70%', '100%', '5%', '10%', '0%', '60%',
           '90%', '6%', '0%', '0%', '90%', '90%', '0%', '0%', '0%', '90%', '5%', '60%',
           '70%', '100%', '0%', '0%', '0%', '0%', '10%', '0%', '0%', '0%', '10%', '1%',
           '0%', '0%', '0%', '0%', '0%', '0%', '90%', '0%', '0%', '0%', '0%', '10%',
           '100%', '0%', '0%', '90%', '0%', '0%', '0%', '0%', '0%', '10%', '0%', '1%',
           '0%', '1%', '1%', '0%', '0%', '0%', '10%', '0%', '1%', '0%', '10%', '0%',
           '10%', '0%', '0%', '0%', '0%', '0%', '0%', '0%', '10%', '0%', '10%', '0%',
           '0%', '0%', '5%', '0%', '0%', '0%', '0%', '0%', '0%', '0%', '0%', '5%',
           '1%', '5%', '0%', '10%', '10%', '1%', '0%', '1%', '100%', '1%', '70%',
           '0%', '0%', '0%'],

    'HY': ['0%', '0%', '100%', '0%', '100%', '100%', '1%', '100%', '100%', '100%',
           '1%', '0%', '100%', '100%', '100%', '100%', '0%', '100%', '0%', '100%',
           '100%', '100%', '100%', '100%', '100%', '1%', '90%', '100%', '0%', '0%',
           '100%', '100%', '0%', '0%', '100%', '100%', '10%', '10%', '100%', '0%',
           '0%', '0%', '100%', '100%', '1%', '0%', '100%', '100%', '0%', '0%',
           '0%', '0%', '0%', '100%', '100%', '100%', '100%', '100%', '100%', '100%',
           '100%', '1%', '100%', '0%', '100%', '100%', '0%', '0%', '0%', '0%',
           '100%', '90%', '100%', '5%', '100%', '100%', '100%', '100%', '0%', '0%',
           '100%', '10%', '10%', '10%', '100%', '100%', '1%', '10%', '0%', '0%',
           '10%', '10%', '100%', '100%', '0%', '0%', '90%', '80%', '10%', '0%',
           '0%', '0%', '0%', '0%', '95%', '1%', '0%', '0%', '1%', '10%', '1%',
           '90%', '1%', '100%', '100%', '100%', '100%', '90%', '100%', '0%', '0%',
           '0%', '5%', '0%', '90%', '100%', '100%', '100%', '100%', '1%', '100%',
           '100%', '5%', '1%', '90%', '0%', '100%', '0%', '100%', '100%', '1%',
           '0%', '100%', '100%', '0%', '0%', '100%', '100%', '100%', '100%', '100%',
           '0%', '100%', '100%', '100%', '100%', '0%', '90%', '100%', '100%', '100%',
           '5%', '100%', '100%', '100%', '99%', '0%', '0%', '0%', '100%', '100%',
           '100%', '10%', '100%', '10%', '90%', '100%', '100%', '0%', '100%', '80%',
           '100%', '100%', '10%', '100%', '100%']
}

# Convert percentage strings to float values
for key in data:
    data[key] = np.array([float(value[:-1]) for value in data[key]])

# Ensure all data sets have the same length as age
for key in data:
    if len(data[key]) > len(age):
        data[key] = data[key][:len(age)]
    elif len(data[key]) < len(age):
        print(f"Warning: {key} has {len(data[key])} samples, which is less than {len(age)}. It will be truncated.")

# Create the figure
plt.figure(figsize=(12, 10))


# Function to plot data and trend line
def plot_with_trend_line(age, attribute, label):
    # Create and fit the linear regression model
    model = LinearRegression()
    model.fit(age, attribute)

    # Predict values for the trend line
    trend_line = model.predict(age)

    # Scatter plot
    plt.scatter(age, attribute, s=50, label=f'{label} Data')

    # Trend line
    plt.plot(age, trend_line, linestyle='-', linewidth=2, label=f'{label} Trend')


# Plot each set of attributes
for key in data:
    plot_with_trend_line(age, data[key], key)

# Add labels and title
plt.xlabel('Index (1 to 100)')
plt.ylabel('Percentage (%)')
plt.title('Scatter Plot with Trend Lines for Multiple Data Sets')

# Add a legend
plt.legend()
plt.grid()
plt.show()